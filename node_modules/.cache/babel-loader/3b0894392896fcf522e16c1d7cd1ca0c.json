{"remainingRequest":"/Users/nikolay/projects/frontend/node_modules/babel-loader/lib/index.js!/Users/nikolay/projects/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nikolay/projects/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nikolay/projects/frontend/src/views/Research.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nikolay/projects/frontend/src/views/Research.vue","mtime":1556202083188},{"path":"/Users/nikolay/projects/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikolay/projects/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nikolay/projects/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikolay/projects/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Page from \"@/components/ui/Page\";\nimport { COUNT_SCARS_BY_CAUSE, GET_SCARS_WITH_CAUSE } from \"@/graphql/queries\";\nimport Cart from \"chart.js\";\nimport palette from \"google-palette\";\nimport { setTimeout } from \"timers\";\nimport { release, totalmem } from \"os\";\nimport { toUnicode } from \"punycode\";\nexport default {\n  name: \"Research\",\n  title: \"Research | \".concat(process.env.VUE_APP_NAME),\n  data: function data() {\n    return {\n      countScarsByCause: [],\n      scarsWithCause: [],\n      cause: \"Option 1\",\n      chart: \"\"\n    };\n  },\n  apollo: {\n    countScarsByCause: COUNT_SCARS_BY_CAUSE,\n    scarsWithCause: {\n      query: GET_SCARS_WITH_CAUSE,\n      variables: function variables() {\n        return {\n          cause: this.cause\n        };\n      }\n    }\n  },\n  components: {\n    Page: Page\n  },\n  methods: {\n    generateColours: function generateColours(n) {\n      var seq = palette(\"tol-sq\", n).map(function (c) {\n        return \"#\" + c;\n      });\n      return seq;\n    },\n    createChart: function createChart(chartId, chartData, handleClick) {\n      var _this = this;\n\n      var ctx = document.getElementById(chartId);\n      var chart = new Chart(ctx, chartData); // click to update cause\n\n      if (handleClick) {\n        ctx.onclick = function (e) {\n          var p = chart.getElementAtEvent(e)[0];\n          var label = chart.data.labels[p._index];\n          _this.cause = label;\n\n          _this.$apollo.queries.scarsWithCause.refetch();\n        };\n      }\n\n      this.chart = chart;\n    },\n    chartData: function chartData(type, dataset) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var title = dataset.title,\n          chartData = dataset.chartData;\n      var data = chartData.map(function (d) {\n        return d.value;\n      });\n      var labels = chartData.map(function (d) {\n        return d.key;\n      }).map(function (l) {\n        return l.length > 30 ? l.substring(0, 30) + \"...\" : l;\n      });\n      var datasets = [{\n        label: title,\n        backgroundColor: this.generateColours(data.length),\n        data: data\n      }];\n      return {\n        type: type,\n        data: {\n          datasets: datasets,\n          // These labels appear in the legend and in the tooltips when hovering different arcs\n          labels: labels\n        },\n        options: options\n      };\n    }\n  },\n  updated: function updated() {\n    var _this2 = this;\n\n    // re-render the bar charts when the data changes\n    if (!this.$apollo.queries.scarsWithCause.loading) {\n      // bars\n      this.scarsWithCause.map(function (dataset) {\n        _this2.createChart(\"scar-type-\".concat(dataset.title), _this2.chartData(\"bar\", dataset, {\n          title: {\n            display: true,\n            text: \"Frequency of scar caused by \".concat(_this2.cause, \" by \").concat(dataset.title, \".\")\n          },\n          scales: {\n            yAxes: [{\n              ticks: {\n                beginAtZero: true\n              }\n            }]\n          }\n        }));\n      });\n    }\n\n    if (!this.$apollo.queries.countScarsByCause.loading) {\n      // pie\n      this.countScarsByCause.map(function (dataset) {\n        //console.log(dataset);\n        _this2.createChart(\"types-chart\", _this2.chartData(\"doughnut\", dataset, {\n          legend: {\n            position: \"bottom\"\n          },\n          title: {\n            display: true,\n            text: \"Frequency of scars by cause.\"\n          }\n        }), true);\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    // timeout for smooth animations (hacky?)\n    // pie\n    this.countScarsByCause.map(function (dataset) {\n      //console.log(dataset);\n      _this3.createChart(\"types-chart\", _this3.chartData(\"doughnut\", dataset, {\n        legend: {\n          position: \"bottom\"\n        },\n        title: {\n          display: true,\n          text: \"Frequency of scars by cause.\"\n        }\n      }), true);\n    }); // bars\n\n    this.scarsWithCause.map(function (dataset) {\n      _this3.createChart(\"scar-type-\".concat(dataset.title), _this3.chartData(\"bar\", dataset, {\n        title: {\n          display: true,\n          text: \"Frequency of scar caused by \".concat(_this3.cause, \" by \").concat(dataset.title, \".\")\n        },\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }));\n    });\n  }\n};",{"version":3,"sources":["Research.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <page class=\"research\">\n    <div>\n      <h1 class=\"title has-text-centered\">Research (Demo)</h1>\n      <h3 class=\"subtitle has-text-centered\">\n        This is a demo research component to show off how the data may be processed.\n        In practice data visualisation will probably be performed on demand, utilising more powerful tools.\n      </h3>\n      <p>Click on each cause on the left for more detailed information about the subset.</p>\n    </div>\n    <br>\n    <div class=\"columns\">\n      <div class=\"column\">\n        <canvas v-if=\"!$apollo.queries.countScarsByCause.loading\" id=\"types-chart\"></canvas>\n        <div v-else>Loading...</div>\n      </div>\n      <div class=\"column\">\n        <div v-if=\"!$apollo.queries.scarsWithCause.loading\">\n          <canvas\n            v-for=\"dataset in this.scarsWithCause\"\n            :key=\"dataset.title\"\n            :id=\"`scar-type-${dataset.title}`\"\n          ></canvas>\n        </div>\n        <div v-else>Loading...</div>\n      </div>\n    </div>\n  </page>\n</template>\n\n<script>\nimport Page from \"@/components/ui/Page\";\nimport { COUNT_SCARS_BY_CAUSE, GET_SCARS_WITH_CAUSE } from \"@/graphql/queries\";\nimport Cart from \"chart.js\";\nimport palette from \"google-palette\";\nimport { setTimeout } from \"timers\";\nimport { release, totalmem } from \"os\";\nimport { toUnicode } from \"punycode\";\n\nexport default {\n  name: \"Research\",\n  title: `Research | ${process.env.VUE_APP_NAME}`,\n  data() {\n    return {\n      countScarsByCause: [],\n      scarsWithCause: [],\n      cause: \"Option 1\",\n      chart: \"\"\n    };\n  },\n  apollo: {\n    countScarsByCause: COUNT_SCARS_BY_CAUSE,\n    scarsWithCause: {\n      query: GET_SCARS_WITH_CAUSE,\n      variables() {\n        return {\n          cause: this.cause\n        };\n      }\n    }\n  },\n  components: {\n    Page\n  },\n\n  methods: {\n    generateColours(n) {\n      var seq = palette(\"tol-sq\", n).map(c => \"#\" + c);\n      return seq;\n    },\n\n    createChart(chartId, chartData, handleClick) {\n      const ctx = document.getElementById(chartId);\n      const chart = new Chart(ctx, chartData);\n\n      // click to update cause\n      if (handleClick) {\n        ctx.onclick = e => {\n          const p = chart.getElementAtEvent(e)[0];\n          const label = chart.data.labels[p._index];\n          this.cause = label;\n          this.$apollo.queries.scarsWithCause.refetch();\n        };\n      }\n      this.chart = chart;\n    },\n\n    chartData(type, dataset, options = {}) {\n      const { title, chartData } = dataset;\n\n      const data = chartData.map(d => d.value);\n      const labels = chartData\n        .map(d => d.key)\n        .map(l => (l.length > 30 ? l.substring(0, 30) + \"...\" : l));\n\n      const datasets = [\n        {\n          label: title,\n          backgroundColor: this.generateColours(data.length),\n          data\n        }\n      ];\n\n      return {\n        type,\n        data: {\n          datasets,\n          // These labels appear in the legend and in the tooltips when hovering different arcs\n          labels\n        },\n        options\n      };\n    }\n  },\n\n  updated() {\n    // re-render the bar charts when the data changes\n    if (!this.$apollo.queries.scarsWithCause.loading) {\n      // bars\n      this.scarsWithCause.map(dataset => {\n        this.createChart(\n          `scar-type-${dataset.title}`,\n          this.chartData(\"bar\", dataset, {\n            title: {\n              display: true,\n              text: `Frequency of scar caused by ${this.cause} by ${\n                dataset.title\n              }.`\n            },\n            scales: {\n              yAxes: [\n                {\n                  ticks: {\n                    beginAtZero: true\n                  }\n                }\n              ]\n            }\n          })\n        );\n      });\n    }\n\n    if (!this.$apollo.queries.countScarsByCause.loading) {\n      // pie\n      this.countScarsByCause.map(dataset => {\n        //console.log(dataset);\n        this.createChart(\n          \"types-chart\",\n          this.chartData(\"doughnut\", dataset, {\n            legend: { position: \"bottom\" },\n            title: {\n              display: true,\n              text: `Frequency of scars by cause.`\n            }\n          }),\n          true\n        );\n      });\n    }\n  },\n\n  mounted() {\n    // timeout for smooth animations (hacky?)\n\n    // pie\n    this.countScarsByCause.map(dataset => {\n      //console.log(dataset);\n      this.createChart(\n        \"types-chart\",\n        this.chartData(\"doughnut\", dataset, {\n          legend: { position: \"bottom\" },\n          title: {\n            display: true,\n            text: `Frequency of scars by cause.`\n          }\n        }),\n        true\n      );\n    });\n\n    // bars\n    this.scarsWithCause.map(dataset => {\n      this.createChart(\n        `scar-type-${dataset.title}`,\n        this.chartData(\"bar\", dataset, {\n          title: {\n            display: true,\n            text: `Frequency of scar caused by ${this.cause} by ${\n              dataset.title\n            }.`\n          },\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  beginAtZero: true\n                }\n              }\n            ]\n          }\n        })\n      );\n    });\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.charts-grid {\n  display: grid;\n  grid-template-columns: auto auto;\n  grid-gap: 8px;\n}\n</style>\n"],"sourceRoot":"src/views"}]}