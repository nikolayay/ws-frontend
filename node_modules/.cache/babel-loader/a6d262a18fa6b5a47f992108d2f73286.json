{"remainingRequest":"/Users/nikolay/new-wounds-scars/frontend/node_modules/babel-loader/lib/index.js!/Users/nikolay/new-wounds-scars/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nikolay/new-wounds-scars/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nikolay/new-wounds-scars/frontend/src/components/CreateEntryStepperImageUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nikolay/new-wounds-scars/frontend/src/components/CreateEntryStepperImageUpload.vue","mtime":1556201637780},{"path":"/Users/nikolay/new-wounds-scars/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikolay/new-wounds-scars/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nikolay/new-wounds-scars/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikolay/new-wounds-scars/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/nikolay/new-wounds-scars/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { fabric } from 'fabric';\nimport Warning from \"./Warning\";\nexport default {\n  props: {\n    wizardData: {\n      type: Object,\n      required: true\n    }\n  },\n  components: {\n    Warning: Warning\n  },\n  data: function data() {\n    return {\n      filename: null,\n      displayFileName: null,\n      form: {\n        image: \"\"\n      }\n    };\n  },\n  mounted: function mounted() {\n    var canvas = this.__canvas = new fabric.Canvas('c', {\n      isDrawingMode: true\n    });\n    canvas.selection = true; // Do some initializing stuff\n\n    fabric.Object.prototype.set({\n      transparentCorners: false,\n      cornerColor: 'rgba(102,153,255,0.5)',\n      cornerSize: 12,\n      padding: 5\n    });\n    canvas.freeDrawingBrush = new fabric['PencilBrush'](canvas);\n    canvas.freeDrawingBrush.color = 'Black';\n    canvas.freeDrawingBrush.width = 10;\n  },\n  methods: {\n    clearArtboard: function clearArtboard() {\n      var canvas = this.__canvas;\n      canvas.clear();\n    },\n    saveImage: function () {\n      var _saveImage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var canvas, data, res, uploadedFileUpdate;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                canvas = this.__canvas;\n                /*var img = new Image();\n                img.id = \"pic\";\n                img.crossOrigin = 'Anonymous';\n                img.src = canvas.toDataURL();*/\n\n                data = new FormData();\n                data.append(\"file\", canvas.toDataURL(\"image/jpg\"));\n                data.append(\"upload_preset\", \"woundscars\");\n                _context.next = 6;\n                return fetch(\"https://api.cloudinary.com/v1_1/nikolamus/image/upload\", {\n                  method: \"POST\",\n                  body: data\n                });\n\n              case 6:\n                res = _context.sent;\n                _context.next = 9;\n                return res.json();\n\n              case 9:\n                uploadedFileUpdate = _context.sent;\n                this.$snackbar.open({\n                  message: \"Image uploaded sucessfullly\",\n                  position: \"is-top\"\n                });\n                /*\n                data.append(\"file\", img);\n                data.append(\"upload_preset\", \"woundscars\");\n                const recog = await fetch(\n                  \"https://api.cloudinary.com/v1_1/nikolamus/image/upload\",\n                    {\n                      method: \"POST\",\n                      body: data\n                    }\n                );\n                 const uploadedFileUpdate = await recog.json();*/\n                // update form\n\n                this.form.image = uploadedFileUpdate.secure_url;\n                Object.assign(this.wizardData, this.form);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function saveImage() {\n        return _saveImage.apply(this, arguments);\n      }\n\n      return saveImage;\n    }()\n  },\n  watch: {\n    filename: function () {\n      var _filename = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(file) {\n        var data, res, uploadedFile, canvas;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.$Progress.start();\n                data = new FormData();\n                data.append(\"file\", file);\n                data.append(\"upload_preset\", \"woundscars\");\n                console.log(file);\n                _context2.next = 7;\n                return fetch(\"https://api.cloudinary.com/v1_1/nikolamus/image/upload\", {\n                  method: \"POST\",\n                  body: data\n                });\n\n              case 7:\n                res = _context2.sent;\n                _context2.next = 10;\n                return res.json();\n\n              case 10:\n                uploadedFile = _context2.sent;\n                // user feedback\n                this.$Progress.finish();\n                this.$snackbar.open({\n                  message: \"Image uploaded sucessfullly\",\n                  position: \"is-top\"\n                });\n                this.displayFileName = file.name;\n                canvas = this.__canvas;\n                console.log(uploadedFile.height);\n                canvas.height = uploadedFile.height;\n                canvas.width = uploadedFile.width;\n                console.log(canvas.height);\n                fabric.Image.fromURL(uploadedFile.secure_url, function (myImg) {\n                  var img1 = myImg.set({\n                    left: 0,\n                    top: 0,\n                    width: uploadedFile.width,\n                    height: uploadedFile.height\n                  });\n                  canvas.add(img1);\n                }, {\n                  crossOrigin: 'anonymous'\n                });\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function filename(_x) {\n        return _filename.apply(this, arguments);\n      }\n\n      return filename;\n    }()\n  }\n};",{"version":3,"sources":["CreateEntryStepperImageUpload.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <warning>Image submission is not secure and is only for demo purposes.</warning>\n\n    <canvas id=\"c\" width=\"500\" height=\"500\" style=\"border:1px solid #CA0000;\" ></canvas>\n\n    <b-field position=\"is-centered\" class=\"file\">\n      <b-upload required accept=\"image/*\" v-model=\"filename\">\n        <a class=\"button is-primary\">\n          <b-icon icon=\"upload\"></b-icon>\n          <span>Click to upload</span>\n        </a>\n      </b-upload>\n      <span class=\"file-name\" v-if=\"filename\">{{ displayFileName }}</span>\n      <a class=\"button is-primary\" v-on:click=\"clearArtboard\">\n        <span>Clear</span>\n      </a>\n      <a class=\"button is-primary\" v-on:click=\"saveImage\">\n        <span>Analyse</span>\n      </a>\n    </b-field>\n\n    <!-- <button @click=\"isModalActive=true\" class=\"button is-primary\">Back to label</button> -->\n    <!-- <b-modal :active.sync=\"isModalActive\" has-modal-card>\n      <scar-label-modal>\n        <img class=\"scar-label\" src=\"@/assets/test.jpg\" alt>\n      </scar-label-modal>\n    </b-modal>-->\n    <br>\n  </div>\n</template>\n\n\n<script>\n\nimport { fabric } from 'fabric';\nimport Warning from \"./Warning\";\nexport default {\n  props: {\n    wizardData: {\n      type: Object,\n      required: true\n    }\n  },\n  components: {\n    Warning\n  },\n  data() {\n    return {\n      filename: null,\n      displayFileName: null,\n      form: {\n        image: \"\"\n      }\n    };\n  },\n  mounted: function() {\n\n  var canvas = this.__canvas = new fabric.Canvas('c', {\n    isDrawingMode: true\n  });\n\n      canvas.selection = true;\n\n      // Do some initializing stuff\n      fabric.Object.prototype.set({\n          transparentCorners: false,\n          cornerColor: 'rgba(102,153,255,0.5)',\n          cornerSize: 12,\n          padding: 5\n      });\n\n\n      canvas.freeDrawingBrush = new fabric['PencilBrush'](canvas);\n      canvas.freeDrawingBrush.color = 'Black';\n      canvas.freeDrawingBrush.width = 10;\n  },\n\n  methods: {\n\n\n    clearArtboard() {\n      var canvas = this.__canvas;\n      canvas.clear();\n    },\n\n    async saveImage() {\n      var canvas = this.__canvas;\n\n      /*var img = new Image();\n      img.id = \"pic\";\n      img.crossOrigin = 'Anonymous';\n      img.src = canvas.toDataURL();*/\n\n\n      const data = new FormData();\n      data.append(\"file\", canvas.toDataURL(\"image/jpg\"));\n      data.append(\"upload_preset\", \"woundscars\");\n      const res = await fetch(\n        \"https://api.cloudinary.com/v1_1/nikolamus/image/upload\",\n        {\n          method: \"POST\",\n          body: data\n        }\n      );\n      const uploadedFileUpdate = await res.json();\n\n      this.$snackbar.open({\n        message: `Image uploaded sucessfullly`,\n        position: \"is-top\"\n      });\n\n\n\n\n\n      /*\n      data.append(\"file\", img);\n      data.append(\"upload_preset\", \"woundscars\");\n      const recog = await fetch(\n        \"https://api.cloudinary.com/v1_1/nikolamus/image/upload\",\n          {\n            method: \"POST\",\n            body: data\n          }\n      );\n\n      const uploadedFileUpdate = await recog.json();*/\n\n\n      // update form\n      this.form.image = uploadedFileUpdate.secure_url;\n      Object.assign(this.wizardData, this.form);\n\n\n    },\n\n\n  },\n\n\n\n  watch: {\n    async filename(file) {\n      this.$Progress.start();\n      const data = new FormData();\n      data.append(\"file\", file);\n      data.append(\"upload_preset\", \"woundscars\");\n      console.log(file)\n      const res = await fetch(\n        \"https://api.cloudinary.com/v1_1/nikolamus/image/upload\",\n        {\n          method: \"POST\",\n          body: data\n        }\n      );\n      const uploadedFile = await res.json();\n      // user feedback\n      this.$Progress.finish();\n      this.$snackbar.open({\n        message: `Image uploaded sucessfullly`,\n        position: \"is-top\"\n      });\n      this.displayFileName = file.name;\n\n      var canvas = this.__canvas;\n\n      console.log(uploadedFile.height)\n\n      canvas.height = uploadedFile.height\n      canvas.width = uploadedFile.width\n\n      console.log(canvas.height)\n\n      fabric.Image.fromURL(uploadedFile.secure_url, function(myImg) {\n      var img1 = myImg.set({ left: 0, top: 0, width: uploadedFile.width, height: uploadedFile.height });\n      canvas.add(img1); },{crossOrigin : 'anonymous'});\n\n    }\n  }\n};\n</script>\n\n<style scoped>\n.button {\n  margin: auto !important;\n}\n\n</style>\n\n\n"],"sourceRoot":"src/components"}]}