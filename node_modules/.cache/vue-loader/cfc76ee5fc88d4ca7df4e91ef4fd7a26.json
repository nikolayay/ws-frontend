{"remainingRequest":"/Users/nikolay/new-wounds-scars/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nikolay/new-wounds-scars/frontend/src/views/Research.vue?vue&type=style&index=0&id=213283fc&scoped=true&lang=css&","dependencies":[{"path":"/Users/nikolay/new-wounds-scars/frontend/src/views/Research.vue","mtime":1556202083188},{"path":"/Users/nikolay/new-wounds-scars/frontend/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/nikolay/new-wounds-scars/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/nikolay/new-wounds-scars/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/nikolay/new-wounds-scars/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikolay/new-wounds-scars/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.charts-grid {\n  display: grid;\n  grid-template-columns: auto auto;\n  grid-gap: 8px;\n}\n",{"version":3,"sources":["Research.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkNA;AACA;AACA;AACA;AACA","file":"Research.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <page class=\"research\">\n    <div>\n      <h1 class=\"title has-text-centered\">Research (Demo)</h1>\n      <h3 class=\"subtitle has-text-centered\">\n        This is a demo research component to show off how the data may be processed.\n        In practice data visualisation will probably be performed on demand, utilising more powerful tools.\n      </h3>\n      <p>Click on each cause on the left for more detailed information about the subset.</p>\n    </div>\n    <br>\n    <div class=\"columns\">\n      <div class=\"column\">\n        <canvas v-if=\"!$apollo.queries.countScarsByCause.loading\" id=\"types-chart\"></canvas>\n        <div v-else>Loading...</div>\n      </div>\n      <div class=\"column\">\n        <div v-if=\"!$apollo.queries.scarsWithCause.loading\">\n          <canvas\n            v-for=\"dataset in this.scarsWithCause\"\n            :key=\"dataset.title\"\n            :id=\"`scar-type-${dataset.title}`\"\n          ></canvas>\n        </div>\n        <div v-else>Loading...</div>\n      </div>\n    </div>\n  </page>\n</template>\n\n<script>\nimport Page from \"@/components/ui/Page\";\nimport { COUNT_SCARS_BY_CAUSE, GET_SCARS_WITH_CAUSE } from \"@/graphql/queries\";\nimport Cart from \"chart.js\";\nimport palette from \"google-palette\";\nimport { setTimeout } from \"timers\";\nimport { release, totalmem } from \"os\";\nimport { toUnicode } from \"punycode\";\n\nexport default {\n  name: \"Research\",\n  title: `Research | ${process.env.VUE_APP_NAME}`,\n  data() {\n    return {\n      countScarsByCause: [],\n      scarsWithCause: [],\n      cause: \"Option 1\",\n      chart: \"\"\n    };\n  },\n  apollo: {\n    countScarsByCause: COUNT_SCARS_BY_CAUSE,\n    scarsWithCause: {\n      query: GET_SCARS_WITH_CAUSE,\n      variables() {\n        return {\n          cause: this.cause\n        };\n      }\n    }\n  },\n  components: {\n    Page\n  },\n\n  methods: {\n    generateColours(n) {\n      var seq = palette(\"tol-sq\", n).map(c => \"#\" + c);\n      return seq;\n    },\n\n    createChart(chartId, chartData, handleClick) {\n      const ctx = document.getElementById(chartId);\n      const chart = new Chart(ctx, chartData);\n\n      // click to update cause\n      if (handleClick) {\n        ctx.onclick = e => {\n          const p = chart.getElementAtEvent(e)[0];\n          const label = chart.data.labels[p._index];\n          this.cause = label;\n          this.$apollo.queries.scarsWithCause.refetch();\n        };\n      }\n      this.chart = chart;\n    },\n\n    chartData(type, dataset, options = {}) {\n      const { title, chartData } = dataset;\n\n      const data = chartData.map(d => d.value);\n      const labels = chartData\n        .map(d => d.key)\n        .map(l => (l.length > 30 ? l.substring(0, 30) + \"...\" : l));\n\n      const datasets = [\n        {\n          label: title,\n          backgroundColor: this.generateColours(data.length),\n          data\n        }\n      ];\n\n      return {\n        type,\n        data: {\n          datasets,\n          // These labels appear in the legend and in the tooltips when hovering different arcs\n          labels\n        },\n        options\n      };\n    }\n  },\n\n  updated() {\n    // re-render the bar charts when the data changes\n    if (!this.$apollo.queries.scarsWithCause.loading) {\n      // bars\n      this.scarsWithCause.map(dataset => {\n        this.createChart(\n          `scar-type-${dataset.title}`,\n          this.chartData(\"bar\", dataset, {\n            title: {\n              display: true,\n              text: `Frequency of scar caused by ${this.cause} by ${\n                dataset.title\n              }.`\n            },\n            scales: {\n              yAxes: [\n                {\n                  ticks: {\n                    beginAtZero: true\n                  }\n                }\n              ]\n            }\n          })\n        );\n      });\n    }\n\n    if (!this.$apollo.queries.countScarsByCause.loading) {\n      // pie\n      this.countScarsByCause.map(dataset => {\n        //console.log(dataset);\n        this.createChart(\n          \"types-chart\",\n          this.chartData(\"doughnut\", dataset, {\n            legend: { position: \"bottom\" },\n            title: {\n              display: true,\n              text: `Frequency of scars by cause.`\n            }\n          }),\n          true\n        );\n      });\n    }\n  },\n\n  mounted() {\n    // timeout for smooth animations (hacky?)\n\n    // pie\n    this.countScarsByCause.map(dataset => {\n      //console.log(dataset);\n      this.createChart(\n        \"types-chart\",\n        this.chartData(\"doughnut\", dataset, {\n          legend: { position: \"bottom\" },\n          title: {\n            display: true,\n            text: `Frequency of scars by cause.`\n          }\n        }),\n        true\n      );\n    });\n\n    // bars\n    this.scarsWithCause.map(dataset => {\n      this.createChart(\n        `scar-type-${dataset.title}`,\n        this.chartData(\"bar\", dataset, {\n          title: {\n            display: true,\n            text: `Frequency of scar caused by ${this.cause} by ${\n              dataset.title\n            }.`\n          },\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  beginAtZero: true\n                }\n              }\n            ]\n          }\n        })\n      );\n    });\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.charts-grid {\n  display: grid;\n  grid-template-columns: auto auto;\n  grid-gap: 8px;\n}\n</style>\n"]}]}