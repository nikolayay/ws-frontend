{"remainingRequest":"/Users/nikolay/new-wounds-scars/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nikolay/new-wounds-scars/frontend/src/components/CreateEntryStepperImageUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nikolay/new-wounds-scars/frontend/src/components/CreateEntryStepperImageUpload.vue","mtime":1549737924497},{"path":"/Users/nikolay/new-wounds-scars/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nikolay/new-wounds-scars/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikolay/new-wounds-scars/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Warning from \"./Warning\";\nexport default {\n  props: {\n    wizardData: {\n      type: Object,\n      required: true\n    }\n  },\n  components: {\n    Warning\n  },\n  data() {\n    return {\n      filename: null,\n      displayFileName: null,\n      form: {\n        image: \"\"\n      }\n    };\n  },\n\n  watch: {\n    async filename(file) {\n      this.$Progress.start();\n      console.log(\"uploading file...\");\n      const data = new FormData();\n      data.append(\"file\", file);\n      data.append(\"upload_preset\", \"woundscars\");\n      const res = await fetch(\n        \"https://api.cloudinary.com/v1_1/nikolamus/image/upload\",\n        {\n          method: \"POST\",\n          body: data\n        }\n      );\n      const uploadedFile = await res.json();\n      // user feedback\n      this.$Progress.finish();\n      this.$snackbar.open({\n        message: `Image uploaded sucessfullly`,\n        position: \"is-top\"\n      });\n      this.displayFileName = file.name;\n\n      // update form\n      this.form.image = uploadedFile.secure_url;\n      Object.assign(this.wizardData, this.form);\n    }\n  }\n};\n",{"version":3,"sources":["CreateEntryStepperImageUpload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"CreateEntryStepperImageUpload.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <warning>Image submission is not secure and is only for demo purposes.</warning>\n\n    <b-field position=\"is-centered\" class=\"file\">\n      <b-upload required accept=\"image/*\" v-model=\"filename\">\n        <a class=\"button is-primary\">\n          <b-icon icon=\"upload\"></b-icon>\n          <span>Click to upload</span>\n        </a>\n      </b-upload>\n      <span class=\"file-name\" v-if=\"filename\">{{ displayFileName }}</span>\n    </b-field>\n\n    <br>\n  </div>\n</template>\n\n<script>\nimport Warning from \"./Warning\";\nexport default {\n  props: {\n    wizardData: {\n      type: Object,\n      required: true\n    }\n  },\n  components: {\n    Warning\n  },\n  data() {\n    return {\n      filename: null,\n      displayFileName: null,\n      form: {\n        image: \"\"\n      }\n    };\n  },\n\n  watch: {\n    async filename(file) {\n      this.$Progress.start();\n      console.log(\"uploading file...\");\n      const data = new FormData();\n      data.append(\"file\", file);\n      data.append(\"upload_preset\", \"woundscars\");\n      const res = await fetch(\n        \"https://api.cloudinary.com/v1_1/nikolamus/image/upload\",\n        {\n          method: \"POST\",\n          body: data\n        }\n      );\n      const uploadedFile = await res.json();\n      // user feedback\n      this.$Progress.finish();\n      this.$snackbar.open({\n        message: `Image uploaded sucessfullly`,\n        position: \"is-top\"\n      });\n      this.displayFileName = file.name;\n\n      // update form\n      this.form.image = uploadedFile.secure_url;\n      Object.assign(this.wizardData, this.form);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.button {\n  margin: auto !important;\n}\n</style>\n\n\n"]}]}